<!-- references the page "todo"-->
@page "/todo"

<h1>Todo (@todos.Count(todo => !todo.IsDone))</h1><!-- header to show a count of the number of todo items that aren't complete (IsDone is false). '-->

<ul><!-- unordered list -->
    @foreach (var todo in todos)
    {<!-- unordered list markup and a foreach loop to render each todo item as a list item -->
        <li><!-- list item -->
            <input type="checkbox" @bind="todo.IsDone" /><!-- create a checkbox to help user keep track of completed items-->
            <input @bind="todo.Title" /><!-- binds it's value to the IsDone property -->
        </li><!-- list item -->
    }
</ul><!-- unordered list -->

<!--UI elements for adding todo items to the list.-->
<input placeholder="Something todo" @bind="newTodo" /><!--text input that binds newTodo with the @bind attribute -->
<button @onclick="AddTodo">Add todo</button><!--button to add an item to the list w/ an event handler-->

@code { //field for the todo items
    private List<TodoItem> todos = new(); // The Todo component uses this field to maintain the state of the todo list.
    private string newTodo; // newToDo string field
   
    private void AddTodo() // AddToDo method
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        { // Todo: Add the todo
            todos.Add(new TodoItem { Title = newTodo }); // adding items and title to the list
            newTodo = string.Empty;
        }
    }
}